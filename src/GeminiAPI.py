import random
import json
import requests
from .api_secrets import gemini_api_key
import src.Utility as Utility

# Name: Kush Patel
# Project Description: This program generates a markdown resume by combining a personal description with
#                      a randomly selected job description from rapid_jobs2.json. The markdown resume is
#                      generated by prompting the Gemini AI model to create a markdown resume based on this information.

# Note to self for github yaml command for pytest: python -m pytest tests/*


# Function to get a random job listing from the JSON file
def get_random_json_object():
    with open("../rapid_jobs2.json", "r") as f:
        json_objects = []
        for line in f:
            # Read each line in rapid_jobs2.json file as a JSON object
            json_objects.append(json.loads(line))
        # Select a random section from the JSON list
        random_job_section = random.choice(json_objects)
        # Select a random job within the chosen section
        random_job = random.choice(random_job_section)
    return random_job


def create_AI_prompt(personal_info, job_description, res_or_cov):
    AI_Prompt = (
        f"Remember my Personal Information: {personal_info}\nRemember the Job description: "
        f"{job_description}\nNow create a {res_or_cov} in markdown format that will be designed from "
        f"my personal information, using keywords from job description that I provided"
    )

    return AI_Prompt


# res_or_cov: resume or cover letter, parameter can only be "resume" or "cover letter"
def ask_gemini(user_info, job_des, res_or_cov):
    # Get the API key from the api_secrets file to access Google's Gemini AI model
    key = gemini_api_key

    prompt = create_AI_prompt(user_info, job_des, res_or_cov)

    # Prepare the API request payload for Google's Gemini AI model
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={key}"
    headers = {"content-type": "application/json"}
    data = {
        "contents": [
            {
                "parts": [
                    {
                        "text": prompt
                    }
                ]
            }
        ]
    }

    # Send a post request to the Gemini API
    response = requests.post(url, headers=headers, json=data)
    return response


def save_response(response, save_res_name, save_cov_name, res_or_cov):
    response_json = response.json()

    # Extract the generated markdown resume from the API response
    marked_resume = response_json["candidates"][0]["content"]["parts"][0]["text"]

    # Save the generated resume to a markdown file
    if res_or_cov == "Resume":
        new_markdown_file_path = f"./{save_res_name}.md"
        pdf_save_path = f"./{save_res_name}.pdf"
    else:
        new_markdown_file_path = f"./{save_cov_name}.md"
        pdf_save_path = f"./{save_cov_name}.pdf"

    with open(new_markdown_file_path, "w") as f:
        f.write(marked_resume)

    # Convert to markdown file to PDF
    Utility.convert_markdown_to_pdf(new_markdown_file_path, pdf_save_path)
